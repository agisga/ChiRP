#   for(s in 1:4){
#     ## maximize sum
#     sum_f <- gamma*(pmat$f[s,s+1]*v[s+1] + pmat$f[s,1]*v[1])
#     sum_b <- gamma*(pmat$b[s,s+1]*v[s+1] + pmat$b[s,1]*v[1])
#
#     # update
#     if(sum_f >= sum_b){
#       v[s] <- r[s] + sum_f
#       a_shell[i,s] <- 'f'
#     }else{
#       v[s] <- r[s]+ sum_b
#       a_shell[i,s] <- 'b'
#     }
#   }
#
#   sum_f <- gamma*(pmat$f[5,5]*v[5] + pmat$f[5,1]*v[1])
#   sum_b <- gamma*(pmat$b[5,5]*v[5] + pmat$b[5,1]*v[1])
#
#   # update
#   if(sum_f >= sum_b){
#     v[5] <- r[5] + sum_f
#     a_shell[i,5] <- 'f'
#   }else{
#     v[5] <- r[5] + sum_b
#     a_shell[i,5] <- 'b'
#   }
#
#   v_shell[i,] <- v
#
# }
r = matrix(0, 5,5)
r[,1] <- 2
r[5,5] <- 10
for(i in 1:iter){
for(s in 1:4){
## maximize sum
sum_f <- pmat$f[s,s+1]*r[s,s+1] + pmat$f[s,1]*r[s,1]  + gamma*(pmat$f[s,s+1]*v[s+1] + pmat$f[s,1]*v[1])
sum_b <- pmat$b[s,s+1]*r[s,s+1] + pmat$b[s,1]*r[s,1]  + gamma*(pmat$b[s,s+1]*v[s+1] + pmat$b[s,1]*v[1])
# update
if(sum_f >= sum_b){
v[s] <- sum_f
a_shell[i,s] <- 'f'
}else{
v[s] <- sum_b
a_shell[i,s] <- 'b'
}
}
sum_f <- pmat$f[5,5]*r[5,5] + pmat$f[5,1]*r[5,1] + gamma*(pmat$f[5,5]*v[5] + pmat$f[5,1]*v[1])
sum_b <- pmat$b[5,5]*r[5,5] + pmat$b[5,1]*r[5,1] + gamma*(pmat$b[5,5]*v[5] + pmat$b[5,1]*v[1])
# update
if(sum_f >= sum_b){
v[5] <- sum_f
a_shell[i,5] <- 'f'
}else{
v[5] <-  sum_b
a_shell[i,5] <- 'b'
}
v_shell[i,] <- v
}
plot(v_shell[,1], type='l', ylim=c(0,100))
lines(v_shell[,2])
lines(v_shell[,3])
lines(v_shell[,4])
lines(v_shell[,5])
v_shell[iter,]
a_shell[iter,]
plot(v_shell[,1], type='l', ylim=c(0,80), col='red')
lines(v_shell[,2], col='blue')
lines(v_shell[,3], col='green')
lines(v_shell[,4], col='orange')
lines(v_shell[,5], col='black')
legend('bottomright', bty='n', legend=c('V*(0)', 'V*(1)','V*(2)','V*(3)','V*(4)'),
col=c('red','blue','green','orange','black'))
legend('bottomright', bty='n', legend=c('V*(0)', 'V*(1)','V*(2)','V*(3)','V*(4)'),
fill=c('red','blue','green','orange','black'))
plot(v_shell[,1], type='l', ylim=c(0,80),
col='red', xlab=c('Iteration'), ylab='V*(s)')
lines(v_shell[,2], col='blue')
lines(v_shell[,3], col='green')
lines(v_shell[,4], col='orange')
lines(v_shell[,5], col='black')
legend('bottomright', bty='n', legend=c('V*(0)', 'V*(1)','V*(2)','V*(3)','V*(4)'),
col=c('red','blue','green','orange','black'), lty = c(1,1,1,1,1))
v_shell[iter,]
plot(v_shell[,1], type='l', ylim=c(0,80),
col='red', xlab=c('Iteration'), ylab='V*(s)',
main='Value Iteration Results for Chain MDP')
lines(v_shell[,2], col='blue')
lines(v_shell[,3], col='green')
lines(v_shell[,4], col='orange')
lines(v_shell[,5], col='black')
legend('bottomright', bty='n', legend=c('V*(0)', 'V*(1)','V*(2)','V*(3)','V*(4)'),
col=c('red','blue','green','orange','black'), lty = c(1,1,1,1,1))
v_shell[iter,]
a_shell[iter,]
pmat <- list(f=matrix(0, 5, 5), b=matrix(0, 5, 5))
v <- numeric(length = 5)
r = matrix(0, 5,5)
v_shell <- matrix(NA, nrow=iter, ncol=5)
a_shell <- matrix(NA, nrow=iter, ncol=5)
colnames(v_shell) <- colnames(a_shell) <- c('S0','S1', 'S2','S3','S4')
## initialize values
pmat$f[1,2] <- .9
pmat$f[1,1] <- .1
pmat$f[2,3] <- .9
pmat$f[2,1] <- .1
pmat$f[3,4] <- .9
pmat$f[3,1] <- .1
pmat$f[4,5] <- .9
pmat$f[4,1] <- .1
pmat$f[5,5] <- .9
pmat$f[5,1] <- .1
pmat$b[1,2] <- .1
pmat$b[1,1] <- .9
pmat$b[2,3] <- .1
pmat$b[2,1] <- .9
pmat$b[3,4] <- .1
pmat$b[3,1] <- .9
pmat$b[4,5] <- .1
pmat$b[4,1] <- .9
pmat$b[5,5] <- .1
pmat$b[5,1] <- .9
v[1:5] <- 0
r[1] <- 2
r[5] <- 10
gamma <- .9
iter <- 500
r[,1] <- 2
r[5,5] <- 10
#######               Start Value Iteration                              #######
for(i in 1:iter){
## states 0 - 3
for(s in 1:4){
## maximize sum
sum_f <- pmat$f[s,s+1]*r[s,s+1] + pmat$f[s,1]*r[s,1]  + gamma*(pmat$f[s,s+1]*v[s+1] + pmat$f[s,1]*v[1])
sum_b <- pmat$b[s,s+1]*r[s,s+1] + pmat$b[s,1]*r[s,1]  + gamma*(pmat$b[s,s+1]*v[s+1] + pmat$b[s,1]*v[1])
# update
if(sum_f >= sum_b){
v[s] <- sum_f
a_shell[i,s] <- 'f'
}else{
v[s] <- sum_b
a_shell[i,s] <- 'b'
}
}
# code state 4 separately
sum_f <- pmat$f[5,5]*r[5,5] + pmat$f[5,1]*r[5,1] + gamma*(pmat$f[5,5]*v[5] + pmat$f[5,1]*v[1])
sum_b <- pmat$b[5,5]*r[5,5] + pmat$b[5,1]*r[5,1] + gamma*(pmat$b[5,5]*v[5] + pmat$b[5,1]*v[1])
# update
if(sum_f >= sum_b){
v[5] <- sum_f
a_shell[i,5] <- 'f'
}else{
v[5] <-  sum_b
a_shell[i,5] <- 'b'
}
v_shell[i,] <- v
}
## Plot results
plot(v_shell[,1], type='l', ylim=c(0,80),
col='red', xlab=c('Iteration'), ylab='V*(s)',
main='Value Iteration Results for Chain MDP')
lines(v_shell[,2], col='blue')
lines(v_shell[,3], col='green')
lines(v_shell[,4], col='orange')
lines(v_shell[,5], col='black')
legend('bottomright', bty='n', legend=c('V*(0)', 'V*(1)','V*(2)','V*(3)','V*(4)'),
col=c('red','blue','green','orange','black'), lty = c(1,1,1,1,1))
v_shell[iter,]
a_shell[iter,]
plot(v_shell[,1], type='l', ylim=c(0,80),
col='red', xlab=c('Iteration'), ylab='V*(s)',
main='Value Iteration Results for Chain MDP')
iter=500
pmat <- list(f=matrix(0, 5, 5), b=matrix(0, 5, 5))
v <- numeric(length = 5)
r = matrix(0, 5,5)
v_shell <- matrix(NA, nrow=iter, ncol=5)
a_shell <- matrix(NA, nrow=iter, ncol=5)
colnames(v_shell) <- colnames(a_shell) <- c('S0','S1', 'S2','S3','S4')
## initialize values
pmat$f[1,2] <- .9
pmat$f[1,1] <- .1
pmat$f[2,3] <- .9
pmat$f[2,1] <- .1
pmat$f[3,4] <- .9
pmat$f[3,1] <- .1
pmat$f[4,5] <- .9
pmat$f[4,1] <- .1
pmat$f[5,5] <- .9
pmat$f[5,1] <- .1
pmat$b[1,2] <- .1
pmat$b[1,1] <- .9
pmat$b[2,3] <- .1
pmat$b[2,1] <- .9
pmat$b[3,4] <- .1
pmat$b[3,1] <- .9
pmat$b[4,5] <- .1
pmat$b[4,1] <- .9
pmat$b[5,5] <- .1
pmat$b[5,1] <- .9
v[1:5] <- 0
r[1] <- 2
r[5] <- 10
gamma <- .9
r[,1] <- 2
r[5,5] <- 10
#######               Start Value Iteration                              #######
for(i in 1:iter){
## states 0 - 3
for(s in 1:4){
## maximize sum
sum_f <- pmat$f[s,s+1]*r[s,s+1] + pmat$f[s,1]*r[s,1]  + gamma*(pmat$f[s,s+1]*v[s+1] + pmat$f[s,1]*v[1])
sum_b <- pmat$b[s,s+1]*r[s,s+1] + pmat$b[s,1]*r[s,1]  + gamma*(pmat$b[s,s+1]*v[s+1] + pmat$b[s,1]*v[1])
# update
if(sum_f >= sum_b){
v[s] <- sum_f
a_shell[i,s] <- 'f'
}else{
v[s] <- sum_b
a_shell[i,s] <- 'b'
}
}
# code state 4 separately
sum_f <- pmat$f[5,5]*r[5,5] + pmat$f[5,1]*r[5,1] + gamma*(pmat$f[5,5]*v[5] + pmat$f[5,1]*v[1])
sum_b <- pmat$b[5,5]*r[5,5] + pmat$b[5,1]*r[5,1] + gamma*(pmat$b[5,5]*v[5] + pmat$b[5,1]*v[1])
# update
if(sum_f >= sum_b){
v[5] <- sum_f
a_shell[i,5] <- 'f'
}else{
v[5] <-  sum_b
a_shell[i,5] <- 'b'
}
v_shell[i,] <- v
}
## Plot results
plot(v_shell[,1], type='l', ylim=c(0,80),
col='red', xlab=c('Iteration'), ylab='V*(s)',
main='Value Iteration Results for Chain MDP')
lines(v_shell[,2], col='blue')
lines(v_shell[,3], col='green')
lines(v_shell[,4], col='orange')
lines(v_shell[,5], col='black')
legend('bottomright', bty='n', legend=c('V*(0)', 'V*(1)','V*(2)','V*(3)','V*(4)'),
col=c('red','blue','green','orange','black'), lty = c(1,1,1,1,1))
v_shell[iter,]
a_shell[iter,]
iter=200
pmat <- list(f=matrix(0, 5, 5), b=matrix(0, 5, 5))
v <- numeric(length = 5)
r = matrix(0, 5,5)
v_shell <- matrix(NA, nrow=iter, ncol=5)
a_shell <- matrix(NA, nrow=iter, ncol=5)
colnames(v_shell) <- colnames(a_shell) <- c('S0','S1', 'S2','S3','S4')
## initialize values
pmat$f[1,2] <- .9
pmat$f[1,1] <- .1
pmat$f[2,3] <- .9
pmat$f[2,1] <- .1
pmat$f[3,4] <- .9
pmat$f[3,1] <- .1
pmat$f[4,5] <- .9
pmat$f[4,1] <- .1
pmat$f[5,5] <- .9
pmat$f[5,1] <- .1
pmat$b[1,2] <- .1
pmat$b[1,1] <- .9
pmat$b[2,3] <- .1
pmat$b[2,1] <- .9
pmat$b[3,4] <- .1
pmat$b[3,1] <- .9
pmat$b[4,5] <- .1
pmat$b[4,1] <- .9
pmat$b[5,5] <- .1
pmat$b[5,1] <- .9
v[1:5] <- 0
r[1] <- 2
r[5] <- 10
gamma <- .9
r[,1] <- 2
r[5,5] <- 10
#######               Start Value Iteration                              #######
for(i in 1:iter){
## states 0 - 3
for(s in 1:4){
## maximize sum
sum_f <- pmat$f[s,s+1]*r[s,s+1] + pmat$f[s,1]*r[s,1]  + gamma*(pmat$f[s,s+1]*v[s+1] + pmat$f[s,1]*v[1])
sum_b <- pmat$b[s,s+1]*r[s,s+1] + pmat$b[s,1]*r[s,1]  + gamma*(pmat$b[s,s+1]*v[s+1] + pmat$b[s,1]*v[1])
# update
if(sum_f >= sum_b){
v[s] <- sum_f
a_shell[i,s] <- 'f'
}else{
v[s] <- sum_b
a_shell[i,s] <- 'b'
}
}
# code state 4 separately
sum_f <- pmat$f[5,5]*r[5,5] + pmat$f[5,1]*r[5,1] + gamma*(pmat$f[5,5]*v[5] + pmat$f[5,1]*v[1])
sum_b <- pmat$b[5,5]*r[5,5] + pmat$b[5,1]*r[5,1] + gamma*(pmat$b[5,5]*v[5] + pmat$b[5,1]*v[1])
# update
if(sum_f >= sum_b){
v[5] <- sum_f
a_shell[i,5] <- 'f'
}else{
v[5] <-  sum_b
a_shell[i,5] <- 'b'
}
v_shell[i,] <- v
}
## Plot results
plot(v_shell[,1], type='l', ylim=c(0,80),
col='red', xlab=c('Iteration'), ylab='V*(s)',
main='Value Iteration Results for Chain MDP')
lines(v_shell[,2], col='blue')
lines(v_shell[,3], col='green')
lines(v_shell[,4], col='orange')
lines(v_shell[,5], col='black')
legend('bottomright', bty='n', legend=c('V*(0)', 'V*(1)','V*(2)','V*(3)','V*(4)'),
col=c('red','blue','green','orange','black'), lty = c(1,1,1,1,1))
v_shell[iter,]
a_shell[iter,]
iter=200
pmat <- list(f=matrix(0, 5, 5), b=matrix(0, 5, 5))
v <- numeric(length = 5)
r = matrix(0, 5,5)
v_shell <- matrix(NA, nrow=iter, ncol=5)
a_shell <- matrix(NA, nrow=iter, ncol=5)
colnames(v_shell) <- colnames(a_shell) <- c('S0','S1', 'S2','S3','S4')
## initialize values
pmat$f[1,2] <- .9
pmat$f[1,1] <- .1
pmat$f[2,3] <- .9
pmat$f[2,1] <- .1
pmat$f[3,4] <- .9
pmat$f[3,1] <- .1
pmat$f[4,5] <- .9
pmat$f[4,1] <- .1
pmat$f[5,5] <- .9
pmat$f[5,1] <- .1
pmat$b[1,2] <- .1
pmat$b[1,1] <- .9
pmat$b[2,3] <- .1
pmat$b[2,1] <- .9
pmat$b[3,4] <- .1
pmat$b[3,1] <- .9
pmat$b[4,5] <- .1
pmat$b[4,1] <- .9
pmat$b[5,5] <- .1
pmat$b[5,1] <- .9
v[1:5] <- 0
r[1] <- 2
r[5] <- 10
gamma <- .9
r[,1] <- 2
r[5,5] <- 10
#######               Start Value Iteration                              #######
for(i in 1:iter){
## states 0 - 3
for(s in 1:4){
## maximize sum
sum_f <- pmat$f[s,s+1]*r[s,s+1] + pmat$f[s,1]*r[s,1]  + gamma*(pmat$f[s,s+1]*v[s+1] + pmat$f[s,1]*v[1])
sum_b <- pmat$b[s,s+1]*r[s,s+1] + pmat$b[s,1]*r[s,1]  + gamma*(pmat$b[s,s+1]*v[s+1] + pmat$b[s,1]*v[1])
# update
if(sum_f >= sum_b){
v[s] <- sum_f
a_shell[i,s] <- 'f'
}else{
v[s] <- sum_b
a_shell[i,s] <- 'b'
}
}
# code state 4 separately
sum_f <- pmat$f[5,5]*r[5,5] + pmat$f[5,1]*r[5,1] + gamma*(pmat$f[5,5]*v[5] + pmat$f[5,1]*v[1])
sum_b <- pmat$b[5,5]*r[5,5] + pmat$b[5,1]*r[5,1] + gamma*(pmat$b[5,5]*v[5] + pmat$b[5,1]*v[1])
# update
if(sum_f >= sum_b){
v[5] <- sum_f
a_shell[i,5] <- 'f'
}else{
v[5] <-  sum_b
a_shell[i,5] <- 'b'
}
v_shell[i,] <- v
}
## Plot results
plot(v_shell[,1], type='l', ylim=c(0,80),
col='red', xlab=c('Iteration'), ylab='V*(s)',
main='Value Iteration Results for Chain MDP')
lines(v_shell[,2], col='blue')
lines(v_shell[,3], col='green')
lines(v_shell[,4], col='orange')
lines(v_shell[,5], col='black')
legend('bottomright', bty='n', legend=c('V*(0)', 'V*(1)','V*(2)','V*(3)','V*(4)'),
col=c('red','blue','green','orange','black'), lty = c(1,1,1,1,1))
v_shell[iter,]
a_shell[iter,]
sqrt(sum(c(2,13,12,1,6,7,9,23,2)^2) )
# simulation parameters
set.seed(144);
ss=500; trials=5000;
a=50; b=.5; c=.01;
d=25; h=.9;
# generate two independent variables
x=rnorm(n=ss,mean=1000,sd=50);
z=d+h*x+rnorm(ss,0,10)
sim=function(endog){
# assume normal error with constant variance to start
e=rnorm(n=ss,mean=0,sd=10)
y=a+b*x+c*z+e
# Select data generation process
if(endog==TRUE){ fit=lm(y~x) }else{ fit=lm(y~x+z)}
return(fit$coefficients)
}
# run simulation - with and wihtout endogeneity
sim_results=t(replicate(trials,sim(endog=FALSE)))
sim_results_endog=t(replicate(trials,sim(endog=TRUE)))
hist(sim_results[,1])
hist(sim_results_endog[,1])
mean(sim_results[,1] - sim_results_endog[,1])
View(sim_results_endog)
mean(sim_results[,2] - sim_results_endog[,2])
hist(sim_results[,2])
hist(sim_results_endog[,2])
mean(sim_results[,2] - sim_results_endog[,2])
set.seed(144);
ss=500; trials=5000;
a=50; b=.5; c=.1;
d=25; h=.9;
# generate two independent variables
x=rnorm(n=ss,mean=1000,sd=50);
z=d+h*x+rnorm(ss,0,10)
sim=function(endog){
# assume normal error with constant variance to start
e=rnorm(n=ss,mean=0,sd=10)
y=a+b*x+c*z+e
# Select data generation process
if(endog==TRUE){ fit=lm(y~x) }else{ fit=lm(y~x+z)}
return(fit$coefficients)
}
# run simulation - with and wihtout endogeneity
sim_results=t(replicate(trials,sim(endog=FALSE)))
sim_results_endog=t(replicate(trials,sim(endog=TRUE)))
hist(sim_results[,2])
hist(sim_results_endog[,2])
hist(sim_results[,2], xlim=c(0,100))
hist(sim_results[,2])
hist(sim_results[,2]), xlim=c(0,1))
hist(sim_results[,2]), xlim=c(0,1))
hist(sim_results[,2], xlim=c(0,1))
hist(sim_results_endog[,2], add=T)
hist(sim_results[,2], xlim=c(0,1), freq=F, breaks = 50)
hist(sim_results_endog[,2], add=T, freq = F, breaks=50)
hist(sim_results[,2], xlim=c(0,1), freq=T, breaks = 50)
hist(sim_results_endog[,2], add=T, freq = T, breaks=50)
hist(sim_results[,2], xlim=c(0,1), freq=T, breaks = 20)
hist(sim_results_endog[,2], add=T, freq = T, breaks=20)
hist(sim_results_endog[,2], add=T, freq = T, breaks=20, col='blue')
setwd("/Users/aoganisi/Box Sync/R Packages/ChiRP/")
devtools::install("/Users/aoganisi/Box Sync/R Packages/ChiRP/ChiRP")
devtools::install("/Users/aoganisi/Box Sync/R Packages/ChiRP/ChiRP")
library(ChiRP)
devtools::install_github('stablemarkets/ChiRP')
library(ChiRP)
tt <- iris
tt$Sepal.Width <- scale(tt$Sepal.Width)
tt$Petal.Width <- scale(tt$Petal.Width)
tt$Petal.Length <- scale(tt$Petal.Length)
tt$Sepal.Length <- scale(tt$Sepal.Length)
set.seed(3)
DPglm_res<-NDPMix(d_train = tt,
formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width,
burnin=3000, iter = 4000,phi_y = c(5,1),
beta_var_scale = 10000, init_k=5, x_var_scale = 1, b2_scale = .5)
?NDPMix
set.seed(3)
DPglm_res<-NDPMix(d_train = tt,
formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width,
burnin=3000, iter = 4000,phi_y = c(5,1),
beta_var_scale = 10000, init_k=5, mu_scale = 1, tau_scale = .5)
rr <- ChiRP::cluster_assign_mode(DPglm_res$cluster_inds$train)
par(mfrow=c(1,2))
plot(tt$Petal.Width, tt$Sepal.Length, col=as.factor(rr$class_mem[,2]),pch=20 )
plot(tt$Petal.Width, tt$Sepal.Length, col=as.factor(tt$Species),pch=20 )
par(mfrow=c(1,2))
plot(tt$Petal.Width, tt$Sepal.Length, col=as.factor(rr$class_mem),pch=20 )
plot(tt$Petal.Width, tt$Sepal.Length, col=as.factor(tt$Species),pch=20 )
?ZDPMix
list.files()
library(roxygen2)
library(devtools)
document()
setwd("ChiRP/")
document()
devtools::install_github('stablemarkets/ChiRP')
library(ChiRP)
?ChiRP::ZDPMix
?summary.lm
ls
list.files()
setwd("R")
list.files()
?NDPMix
?PDPMix
list.files()
cd ..
setwd("../..")
list.files()
setwd("ChiRP")
list.files()
document()
